generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  assignedGoogleID        String                   @unique
  username                String                   @unique
  email                   String                   @unique
  name                    String                   @default("")
  lastName                String                   @default("")
  signedIn                Boolean                  @default(false)
  profilePictures         ProfilePicture[]
  socialMedia             SocialMedia
  accessToken             String                   @default("")
  refreshToken            String                   @default("")
  gender                  Gender                   @default(Femenino)
  userType                UserType                 @default(Normal)
  description             String                   @default("")
  birthDate               DateTime
  interests               String[]                 @default([])
  verified                Boolean                  @default(false)
  phoneNumber             String                   @default("")
  location                Location                 @relation(fields: [locationId], references: [id])
  locationId              String                   @db.ObjectId
  createdAt               DateTime                 @default(now())
  lastLogin               DateTime                 @default(now())
  isCompany               Boolean                  @default(false)
  expoPushToken           String                   @default("")
  webSocketId             String                   @default("")
  followingUserList       UserFollows[]            @relation("FollowerToFollowed")
  followerUserList        UserFollows[]            @relation("FollowedToFollower")
  parties                 PartyMember[]            @relation("PartyMembershipToUser")
  ownedParties            Party[]
  invitedParties          PartyInvitation[]        @relation("PartyInvitedToInviting")
  invitingParties         PartyInvitation[]        @relation("PartyInvitingToInvited")
  partiesModerating       UserPartyModerator[]     @relation("UserToPartyModerator")
  groups                  GroupMember[]            @relation("MembershipToUser")
  ledGroups               Group[]                  @relation("LeaderToGroup")
  groupsModerating        UserGroupModerator[]     @relation("UserToGroupModerator")
  invitedGroups           GroupInvitation[]        @relation("InvitedToInviting")
  invitingGroups          GroupInvitation[]        @relation("InvitingToInvited")
  partyMembershipRequests PartyMembershipRequest[]
  groupMembershipRequests GroupMembershipRequest[]
  tickets                 TicketOwnership[]
  // Variables de empresa
  consumables             Consumable[]             @relation("UserToConsumable")
  consumableItems         ConsumableItem[]         @relation("UserToConsumableItem")
  staffs                  UserStaff[]              @relation("UserToStaff")
  userStaff               UserStaff[]              @relation("StaffToUser")
  ticketsBase             TicketBase[]             @relation("UserToTicketBase")
  ticketsCreated          Ticket[]                 @relation("UserToTicketCreated")
  paymentIntents          PaymentIntent[]          @relation("UserToPayment")
  messages                Message[]
  chats                   Chat[]                   @relation(fields: [chatIds], references: [id])
  chatIds                 String[]                 @db.ObjectId

  @@index([username, email, assignedGoogleID])
  @@index([webSocketId])
}

enum UserType {
  Normal
  Staff
  Enterprise
}

model UserStaff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("userId") @db.ObjectId
  staffId   String   @map("staffId") @db.ObjectId
  user      User     @relation("UserToStaff", fields: [userId], references: [id])
  staff     User     @relation("StaffToUser", fields: [staffId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, staffId])
}

enum Gender {
  Masculino
  Femenino
  NoBinario
  Otro
}

type SocialMedia {
  instagram String
}

model UserFollows {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  followerUserId   String   @map("followerUserId") @db.ObjectId
  followedUserId   String   @map("followedUserId") @db.ObjectId
  followerUsername String
  followedUsername String
  followDate       DateTime

  follower User @relation("FollowerToFollowed", fields: [followerUserId], references: [id])
  followed User @relation("FollowedToFollower", fields: [followedUserId], references: [id])

  @@unique([followerUserId, followedUserId])
}

model ProfilePicture {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Party {
  id                 String                   @id @default(auto()) @map("_id") @db.ObjectId
  location           Location                 @relation(fields: [locationId], references: [id])
  name               String
  description        String
  image              PartyPicture
  tags               String[]
  type               PartyType
  date               DateTime
  advertisement      Boolean
  members            PartyMember[]
  moderators         UserPartyModerator[]
  ageRange           AgeRange
  distance           Int? // optional field to be used in the query
  active             Boolean                  @default(true)
  showAddressInFeed  Boolean                  @default(false)
  ownerId            String                   @map("ownerId") @db.ObjectId
  owner              User                     @relation(fields: [ownerId], references: [id])
  groups             PartyGroup[]             @relation("PartyToPartyGroup")
  createdAt          DateTime                 @default(now())
  membershipRequests PartyMembershipRequest[]
  invitations        PartyInvitation[]
  consumables        Consumable[]             @relation("PartyToConsumable")
  covers             Consumable[]             @relation("PartyToCover")
  ticketOwnerships   TicketOwnership[]
  tickets            Ticket[]                 @relation("PartyToTicket")
  locationId         String                   @db.ObjectId
  paymentIntents     PaymentIntent[]          @relation("PartyToPayment")
  chat               Chat                     @relation(fields: [chatId], references: [id])
  chatId             String                   @db.ObjectId
}

enum PartyType {
  carrete
  junta
  evento
  previa
  otro
}

type AgeRange {
  min Int
  max Int
}

model PartyGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  partyId   String   @map("partyId") @db.ObjectId
  groupId   String   @map("groupId") @db.ObjectId
  party     Party    @relation("PartyToPartyGroup", fields: [partyId], references: [id])
  group     Group    @relation("GroupToPartyGroup", fields: [groupId], references: [id])
  createdAt DateTime @default(now())

  @@unique([partyId, groupId])
}

model PartyMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  partyId   String   @map("partyId") @db.ObjectId
  userId    String   @map("userId") @db.ObjectId
  user      User     @relation("PartyMembershipToUser", fields: [userId], references: [id])
  party     Party    @relation(fields: [partyId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, partyId])
}

model PartyInvitation {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  invitingUser   User             @relation("PartyInvitingToInvited", fields: [invitingUserId], references: [id])
  invitingUserId String           @map("invitingUserId") @db.ObjectId
  invitedUser    User?            @relation("PartyInvitedToInviting", fields: [invitedUserId], references: [id])
  invitedUserId  String?          @map("invitedUserId") @db.ObjectId
  party          Party            @relation(fields: [partyId], references: [id])
  partyId        String           @map("partyId") @db.ObjectId
  group          Group?           @relation("PartyInvitingToGroup", fields: [groupId], references: [id])
  groupId        String?          @map("groupId") @db.ObjectId
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  ticket         Ticket?          @relation(fields: [ticketId], references: [id])
  ticketId       String?          @db.ObjectId
}

model UserPartyModerator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  partyId   String   @db.ObjectId
  userId    String   @map("userId") @db.ObjectId
  user      User     @relation("UserToPartyModerator", fields: [userId], references: [id])
  party     Party    @relation(fields: [partyId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, partyId])
}

model Group {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String                   @default("")
  leader                  User                     @relation("LeaderToGroup", fields: [leaderId], references: [id])
  leaderId                String                   @map("leaderId") @db.ObjectId
  private                 Boolean                  @default(false)
  showInFeed              Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  invitedParties          PartyInvitation[]        @relation("PartyInvitingToGroup")
  ageRange                AgeRange
  members                 GroupMember[]
  moderators              UserGroupModerator[]
  invitations             GroupInvitation[]
  parties                 PartyGroup[]             @relation("GroupToPartyGroup")
  partyMembershipRequests PartyMembershipRequest[]
  groupMembershipRequests GroupMembershipRequest[]
  tickets                 TicketOwnership[]
  paymentIntents          PaymentIntent[]          @relation("GroupToPayment")
  chats                   Chat[]                   @relation(fields: [chatIds], references: [id])
  chatIds                 String[]                 @db.ObjectId
}

model GroupMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @map("groupId") @db.ObjectId
  userId    String   @map("userId") @db.ObjectId
  user      User     @relation("MembershipToUser", fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

model GroupInvitation {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime         @default(now())
  invitingUser   User             @relation("InvitingToInvited", fields: [invitingUserId], references: [id])
  invitingUserId String           @map("invitingUserId") @db.ObjectId
  invitedUser    User             @relation("InvitedToInviting", fields: [invitedUserId], references: [id])
  invitedUserId  String           @map("invitedUserId") @db.ObjectId
  group          Group            @relation(fields: [groupId], references: [id])
  groupId        String           @map("groupId") @db.ObjectId
  status         InvitationStatus @default(PENDING)
}

model UserGroupModerator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @map("groupId") @db.ObjectId
  userId    String   @map("userId") @db.ObjectId
  user      User     @relation("UserToGroupModerator", fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

model PartyMembershipRequest {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String?          @map("groupId") @db.ObjectId
  partyId   String?          @map("partyId") @db.ObjectId
  userId    String?          @map("userId") @db.ObjectId
  status    InvitationStatus @default(PENDING)
  type      MembershipType
  createdAt DateTime         @default(now())
  group     Group?           @relation(fields: [groupId], references: [id])
  party     Party?           @relation(fields: [partyId], references: [id])
  user      User?            @relation(fields: [userId], references: [id])

  @@unique([userId, partyId])
  @@unique([userId, groupId])
  @@unique([groupId, partyId])
}

model GroupMembershipRequest {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String           @map("groupId") @db.ObjectId
  userId    String           @map("userId") @db.ObjectId
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  group     Group            @relation(fields: [groupId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

enum MembershipType {
  GROUP
  SOLO
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  latitude  Float
  longitude Float
  timestamp DateTime
  address   String
  parties   Party[]
  users     User[]
}

type PartyPicture {
  url String
}

model ConsumableStack {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  quantity     Int        @default(0)
  consumableId String     @map("consumableId") @db.ObjectId
  consumable   Consumable @relation("ConsumableToStack", fields: [consumableId], references: [id])
  ticketId     String?    @map("ticketId") @db.ObjectId
  ticket       Ticket?    @relation("TicketToConsumableStack", fields: [ticketId], references: [id])

  @@unique([consumableId, ticketId])
}

model ConsumableItem {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String         @default("")
  pictureUrl  String         @default("")
  type        ConsumableType @default(Other)
  creator     User?          @relation("UserToConsumableItem", fields: [creatorId], references: [id])
  creatorId   String?        @db.ObjectId
  consumables Consumable[]
}

model Consumable {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  price                Int               @default(0)
  stock                Int               @default(0)
  tags                 String[]          @default([])
  brand                String            @default("")
  createdAt            DateTime          @default(now())
  weightOrVolume       Int               @default(0)
  partyIdForConsumable String?           @map("partyIdForConsumable") @db.ObjectId
  partyForConsumable   Party?            @relation("PartyToConsumable", fields: [partyIdForConsumable], references: [id])
  partyIdForCover      String?           @map("partyIdForCover") @db.ObjectId
  partyForCover        Party?            @relation("PartyToCover", fields: [partyIdForCover], references: [id])
  itemId               String            @map("consumableItemId") @db.ObjectId
  item                 ConsumableItem    @relation(fields: [itemId], references: [id])
  creator              User?             @relation("UserToConsumable", fields: [creatorId], references: [id])
  creatorId            String?           @db.ObjectId
  stack                ConsumableStack[] @relation("ConsumableToStack")
}

enum ConsumableType {
  Food
  Drink
  Alcohol
  Other
}

model Ticket {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  price            Int               @default(0)
  stock            Int               @default(200)
  tags             String[]          @default([])
  createdAt        DateTime          @default(now())
  color            TicketColor       @default(grey)
  payInDoor        Boolean           @default(true)
  creatorId        String?           @map("creatorId") @db.ObjectId
  creator          User?             @relation("UserToTicketCreated", fields: [creatorId], references: [id])
  base             TicketBase        @relation(fields: [baseId], references: [id])
  baseId           String            @map("baseId") @db.ObjectId
  partyId          String?           @map("partyId") @db.ObjectId
  party            Party?            @relation("PartyToTicket", fields: [partyId], references: [id])
  consumables      ConsumableStack[] @relation("TicketToConsumableStack")
  ownerShips       TicketOwnership[]
  paymentIntents   PaymentIntent[]   @relation("TicketToPayment")
  partyInvitations PartyInvitation[]
}

enum TicketColor {
  blue
  green
  purple
  yellow
  orange
  teal
  pink
  lightBlue
  grey
  red
}

model TicketBase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  description String
  creatorId   String   @map("creatorId") @db.ObjectId
  creator     User     @relation("UserToTicketBase", fields: [creatorId], references: [id])
  tickets     Ticket[]
}

model TicketOwnership {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  validated            Boolean        @default(false)
  validatedConsumables String[]       @default([])
  ticket               Ticket         @relation(fields: [ticketId], references: [id])
  ticketId             String         @map("ticketId") @db.ObjectId
  party                Party          @relation(fields: [partyId], references: [id])
  partyId              String         @map("partyId") @db.ObjectId
  user                 User?          @relation(fields: [userId], references: [id])
  userId               String?        @map("userId") @db.ObjectId
  group                Group?         @relation(fields: [groupId], references: [id])
  groupId              String?        @map("groupId") @db.ObjectId
  type                 MembershipType @default(SOLO)
  createdAt            DateTime       @default(now())
}

model PaymentIntent {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  currency        String
  status          PaymentStatus @default(pending)
  type            PaymentType   @default(FINTOC)
  widgetToken     String?
  paymentIntentId String
  createdAt       DateTime      @default(now())
  partyId         String        @map("partyId") @db.ObjectId
  party           Party         @relation("PartyToPayment", fields: [partyId], references: [id])
  userId          String        @map("userId") @db.ObjectId
  user            User          @relation("UserToPayment", fields: [userId], references: [id])
  ticketId        String        @map("ticketId") @db.ObjectId
  ticket          Ticket        @relation("TicketToPayment", fields: [ticketId], references: [id])
  groupId         String?       @map("groupId") @db.ObjectId
  group           Group?        @relation("GroupToPayment", fields: [groupId], references: [id])

  @@unique([paymentIntentId])
}

enum PaymentStatus {
  created
  succeeded
  failed
  pending
  rejected
}

enum PaymentType {
  FINTOC
}

model Message {
  id        String   @id @map("_id")
  text      String
  createdAt DateTime
  username  String
  image     String?
  video     String?
  audio     String?
  system    Boolean  @default(false)
  sent      Boolean? @default(true)
  received  Boolean? @default(false)
  pending   Boolean? @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId") @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  messages  Message[]
  users     User[]    @relation(fields: [userIds], references: [id])
  userIds   String[]  @db.ObjectId
  groups    Group[]   @relation(fields: [groupIds], references: [id])
  groupIds  String[]  @db.ObjectId
  parties   Party[]
}
