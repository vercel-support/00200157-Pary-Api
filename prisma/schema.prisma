generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  assignedGoogleID      String                 @unique
  username              String                 @unique
  email                 String                 @unique
  name                  String                 @default("")
  lastName              String                 @default("")
  signedIn              Boolean                @default(false)
  profilePictures       ProfilePicture[]
  accessToken           String                 @default("")
  refreshToken          String                 @default("")
  gender                Gender                 @default(masculino)
  description           String                 @default("")
  birthDate             DateTime
  musicInterest         String[]               @default([])
  deportsInterest       String[]               @default([])
  artAndCultureInterest String[]               @default([])
  techInterest          String[]               @default([])
  hobbiesInterest       String[]               @default([])
  verified              Boolean                @default(false)
  phoneNumber           String                 @default("")
  locationName          String                 @default("")
  locationLatitude      Float                  @default(0)
  locationLongitude     Float                  @default(0)
  locationTimestamp     Float                  @default(0)
  createdAt             DateTime               @default(now())
  lastLogin             DateTime               @default(now())
  isCompany             Boolean                @default(false)
  followingUserList     UserFollows[]          @relation("FollowerToFollowed")
  followerUserList      UserFollows[]          @relation("FollowedToFollower")
  partiesParticipating  UserPartyParticipant[] @relation("UserToPartyParticipant")
  partiesModerating     UserPartyModerator[]   @relation("UserToPartyModerator")
  ownedParties          Party[] // Relaci√≥n para rastrear los parties que un usuario posee

  @@index([username, email, assignedGoogleID])
}

enum Gender {
  masculino
  femenino
  otro
}

model UserFollows {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  followerUserId   String @map("followerUserId") @db.ObjectId
  followedUserId   String @map("followedUserId") @db.ObjectId
  followerUsername String

  follower User @relation("FollowerToFollowed", fields: [followerUserId], references: [id])
  followed User @relation("FollowedToFollower", fields: [followedUserId], references: [id])

  @@unique([followerUserId, followedUserId])
}

model ProfilePicture {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  amazonId String @unique
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
}

model Party {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  location        String
  name            String
  description     String
  image           String
  creatorUsername String
  tags            String[]
  type            PartyType
  creationDate    DateTime
  date            DateTime
  private         Boolean
  advertisement   Boolean
  participants    UserPartyParticipant[]
  moderators      UserPartyModerator[]
  active          Boolean
  ownerId         String?                @map("ownerId") @db.ObjectId
  owner           User?                  @relation(fields: [ownerId], references: [id])
}

enum PartyType {
  carrete
  junta
  evento
  previa
  otro
}

model UserPartyParticipant {
  partyId String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @map("userId") @db.ObjectId
  user    User   @relation("UserToPartyParticipant", fields: [userId], references: [id])
  party   Party  @relation(fields: [partyId], references: [id])

  @@unique([userId, partyId])
}

model UserPartyModerator {
  partyId String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @map("userId") @db.ObjectId
  user    User   @relation("UserToPartyModerator", fields: [userId], references: [id])
  party   Party  @relation(fields: [partyId], references: [id])

  @@unique([userId, partyId])
}
